{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\: )\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to Bloqade-Geometry","text":"<p>Bloqade-Geometry is a collection of tools for transforming and modeling geometric objects used for defining layouts and operation of neutral atom quantum computers.</p> <p>Currently the</p>"},{"location":"index.html#installation","title":"Installation","text":"<pre><code>uv add bloqade-geometry\n</code></pre> <p>See Installation for more details.</p> <p>Check out new Blog to understand more about Bloqade-Geometry.</p>"},{"location":"contrib.html","title":"Contributing","text":"<p>Please see Installation for instructions on how to set up your development environment.</p>"},{"location":"contrib.html#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>We use <code>pre-commit</code> to run the linter checks before you commit your changes. The pre-commit hooks are installed as part of the development dependencies. You can setup <code>pre-commit</code> using the following command:</p> <pre><code>pre-commit install\n</code></pre> <p>This will run the linter checks before you commit your changes. If the checks fail, the commit will be rejected. Most of the following sections can be checked by the pre-commit hooks.</p>"},{"location":"contrib.html#running-the-tests","title":"Running the tests","text":"<p>We use <code>pytest</code> for testing. To run the tests, simply run:</p> <pre><code>pytest\n</code></pre> <p>or for a specific test file with the <code>-s</code> flag to show the output of the program:</p> <pre><code>pytest -s tests/test_program.py\n</code></pre> <p>lots of tests contains pretty printing of the IR themselves, so it's useful to see the output.</p>"},{"location":"contrib.html#code-style","title":"Code style","text":"<p>We use <code>black</code> for code formatting. Besides the linter requirements, we also require the following good-to-have practices:</p>"},{"location":"contrib.html#naming","title":"Naming","text":"<ul> <li>try not to use abbreviation as names, unless it's a common abbreviation like <code>idx</code> for <code>index</code></li> <li>try not create a lot of duplicated name prefix unless the extra information is necessary when accessing the class object.</li> <li>try to use <code>snake_case</code> for naming variables and functions, and <code>CamelCase</code> for classes.</li> </ul>"},{"location":"contrib.html#comments","title":"Comments","text":"<ul> <li>try not to write comments, unless it's really necessary. The code should be self-explanatory.</li> <li>if you have to write comments, try to use <code>NOTE:</code>, <code>TODO:</code> <code>FIXME:</code> tags to make it easier to search for them.</li> </ul>"},{"location":"contrib.html#documentation","title":"Documentation","text":"<p>We use <code>just</code> for mangaging command line tools and scripts. It should be installed when you run <code>uv sync</code>. To build the documentation, simply run:</p> <pre><code>just doc\n</code></pre> <p>This will launch a local server to preview the documentation. You can also run <code>just doc-build</code> to build the documentation without launching the server.</p>"},{"location":"install.html","title":"Installation","text":"<p>Bloqade Shuttle is available on pypi registry. Shuttle supports Python 3.10 or later. We recommend using Python 3.10+ for the best experience.</p> <p>We strongly recommend developing project using <code>uv</code>, which is the official development environment for Kirin and Bloqade Shuttle. You can install <code>uv</code> using the following command:</p> Linux and macOSWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"install.html#install-package","title":"Install package:","text":"<pre><code>uv add bloqade-shuttle\n</code></pre>"},{"location":"install.html#development","title":"Development","text":"<p>We use <code>uv</code> to manage the development environment, after you install <code>uv</code>, you can install the development dependencies using the following command:</p> <pre><code>uv sync\n</code></pre> <p>Our code review requires that you pass the tests and the linting checks. We recommend you to install <code>pre-commit</code> to run the checks before you commit your changes, the command line tool <code>pre-commit</code> has been installed as part of the development dependencies. You can setup <code>pre-commit</code> using the following command:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"reference/bloqade/geometry/index.html","title":"Index","text":""},{"location":"reference/bloqade/geometry/prelude.html","title":"Kernel decorator","text":""},{"location":"reference/bloqade/geometry/prelude.html#bloqade.geometry.prelude.geometry","title":"geometry","text":"<pre><code>geometry(self)\n</code></pre> <p>Structural kernel with optimization passes.</p> Source code in <code>src/bloqade/geometry/prelude.py</code> <pre><code>@ir.dialect_group(structural.add(grid))\ndef geometry(\n    self,\n):\n    \"\"\"Structural kernel with optimization passes.\"\"\"\n    ilist_desugar_pass = ilist.IListDesugar(self)\n\n    def run_pass(\n        mt: Annotated[Method, Doc(\"The method to run pass on.\")],\n        *,\n        verify: Annotated[\n            bool, Doc(\"run `verify` before running passes, default is `True`\")\n        ] = True,\n        typeinfer: Annotated[\n            bool,\n            Doc(\n                \"run type inference and apply the inferred type to IR, default `False`\"\n            ),\n        ] = False,\n        fold: Annotated[bool, Doc(\"run folding passes\")] = True,\n        aggressive: Annotated[\n            bool, Doc(\"run aggressive folding passes if `fold=True`\")\n        ] = False,\n        no_raise: Annotated[bool, Doc(\"do not raise exception during analysis\")] = True,\n    ) -&gt; None:\n        ilist_desugar_pass(mt)\n\n        default_pass = Default(\n            self,\n            verify=verify,\n            fold=fold,\n            aggressive=aggressive,\n            typeinfer=typeinfer,\n            no_raise=no_raise,\n        )\n        default_pass.fixpoint(mt)\n\n    return run_pass\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/index.html","title":"Index","text":""},{"location":"reference/bloqade/geometry/dialects/grid/index.html","title":"Index","text":""},{"location":"reference/bloqade/geometry/dialects/grid/_dialect.html","title":"dialect","text":""},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html","title":"statements","text":""},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.from_positions","title":"from_positions","text":"<pre><code>from_positions(\n    x_positions: IList[float, Nx],\n    y_positions: IList[float, Ny],\n) -&gt; Grid[Nx, Ny]\n</code></pre><pre><code>from_positions(\n    x_positions: IList[float, Nx], y_positions: list[float]\n) -&gt; Grid[Nx, typing.Any]\n</code></pre><pre><code>from_positions(\n    x_positions: list[float], y_positions: IList[float, Ny]\n) -&gt; Grid[typing.Any, Ny]\n</code></pre><pre><code>from_positions(\n    x_positions: list[float], y_positions: list[float]\n) -&gt; Grid[typing.Any, typing.Any]\n</code></pre> <pre><code>from_positions(x_positions, y_positions)\n</code></pre> <p>Construct a grid from the given x and y positions.</p> <p>Parameters:</p> Name Type Description Default <code>x_positions</code> <code>IList[float] | list[float]</code> <p>A list or ilist of floats representing the x-coordinates of grid points.</p> required <code>y_positions</code> <code>IList[float] | list[float]</code> <p>A list or ilist of floats representing the y-coordinates of grid points.</p> required <p>Returns:</p> Name Type Description <code>Grid</code> <p>a grid object</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(FromPositions)\ndef from_positions(x_positions, y_positions):\n    \"\"\"Construct a grid from the given x and y positions.\n\n    Args:\n        x_positions (IList[float] | list[float]): A list or ilist of floats representing the x-coordinates of grid points.\n        y_positions (IList[float] | list[float]): A list or ilist of floats representing the y-coordinates of grid points.\n\n    Returns:\n        Grid: a grid object\n    \"\"\"\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.get","title":"get","text":"<pre><code>get(\n    grid: Grid, idx: tuple[int, int]\n) -&gt; tuple[float, float]\n</code></pre> <p>Get the coordinate (x, y) of a grid at the given index.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid</code> <p>a grid object</p> required <code>idx</code> <code>tuple[int, int]</code> <p>a tuple of (x, y) indices</p> required <p>Returns:     tuple[float, float]: a tuple of (x, y) positions     tuple[None, None]: if the grid has no initial x or y position</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(Get)\ndef get(grid: Grid, idx: tuple[int, int]) -&gt; tuple[float, float]:\n    \"\"\"Get the coordinate (x, y) of a grid at the given index.\n\n    Args:\n        grid (Grid): a grid object\n        idx (tuple[int, int]): a tuple of (x, y) indices\n    Returns:\n        tuple[float, float]: a tuple of (x, y) positions\n        tuple[None, None]: if the grid has no initial x or y position\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.get_xpos","title":"get_xpos","text":"<pre><code>get_xpos(grid: Grid[Nx, Any]) -&gt; ilist.IList[float, Nx]\n</code></pre> <p>Get the x positions of a grid.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid[Nx, Any]</code> <p>a grid object</p> required <p>Returns:     ilist.IList[float, typing.Any]: a list of x positions</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(GetXPos)\ndef get_xpos(grid: Grid[Nx, typing.Any]) -&gt; ilist.IList[float, Nx]:\n    \"\"\"Get the x positions of a grid.\n\n    Args:\n        grid: a grid object\n    Returns:\n        ilist.IList[float, typing.Any]: a list of x positions\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.get_ypos","title":"get_ypos","text":"<pre><code>get_ypos(grid: Grid[Any, Ny]) -&gt; ilist.IList[float, Ny]\n</code></pre> <p>Get the y positions of a grid.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid[Any, Ny]</code> <p>a grid object</p> required <p>Returns:     ilist.IList[float, typing.Any]: a list of y positions</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(GetYPos)\ndef get_ypos(grid: Grid[typing.Any, Ny]) -&gt; ilist.IList[float, Ny]:\n    \"\"\"Get the y positions of a grid.\n\n    Args:\n        grid: a grid object\n    Returns:\n        ilist.IList[float, typing.Any]: a list of y positions\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.new","title":"new","text":"<pre><code>new(\n    x_spacing: IList[float, Any] | list[float],\n    y_spacing: IList[float, Any] | list[float],\n    x_init: float,\n    y_init: float,\n) -&gt; Grid[typing.Any, typing.Any]\n</code></pre> <p>Create a new grid with the given spacing and initial position.</p> <p>Parameters:</p> Name Type Description Default <code>x_spacing</code> <code>IList[float] | list[float]</code> <p>The spacing in the x direction.</p> required <code>y_spacing</code> <code>IList[float] | list[float]</code> <p>The spacing in the y direction.</p> required <code>x_init</code> <code>float</code> <p>The initial position in the x direction.</p> required <code>y_init</code> <code>float</code> <p>The initial position in the y direction.</p> required <p>Returns:</p> Name Type Description <code>Grid</code> <code>Grid[Any, Any]</code> <p>A new grid object.</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(New)\ndef new(\n    x_spacing: ilist.IList[float, typing.Any] | list[float],\n    y_spacing: ilist.IList[float, typing.Any] | list[float],\n    x_init: float,\n    y_init: float,\n) -&gt; Grid[typing.Any, typing.Any]:\n    \"\"\"\n    Create a new grid with the given spacing and initial position.\n\n    Args:\n        x_spacing (IList[float] | list[float]): The spacing in the x direction.\n        y_spacing (IList[float] | list[float]): The spacing in the y direction.\n        x_init (float): The initial position in the x direction.\n        y_init (float): The initial position in the y direction.\n\n    Returns:\n        Grid: A new grid object.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.positions","title":"positions","text":"<pre><code>positions(\n    grid: Grid[Any, Any],\n) -&gt; ilist.IList[tuple[float, float], typing.Any]\n</code></pre> <p>Get the positions of a grid as a list of (x, y) tuples.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid</code> <p>a grid object</p> required <p>Returns:</p> Type Description <code>IList[tuple[float, float], Any]</code> <p>ilist.IList[tuple[float, float], typing.Any]: a list of (x, y) tuples representing the positions of the grid points</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(Positions)\ndef positions(\n    grid: Grid[typing.Any, typing.Any],\n) -&gt; ilist.IList[tuple[float, float], typing.Any]:\n    \"\"\"Get the positions of a grid as a list of (x, y) tuples.\n\n    Args:\n        grid (Grid): a grid object\n\n    Returns:\n        ilist.IList[tuple[float, float], typing.Any]: a list of (x, y) tuples representing the positions of the grid points\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.repeat","title":"repeat","text":"<pre><code>repeat(\n    grid: Grid,\n    x_times: int,\n    y_times: int,\n    x_spacing: float,\n    y_spacing: float,\n) -&gt; Grid\n</code></pre> <p>Repeat a grid in the x and y directions.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid</code> <p>a grid object</p> required <code>x_times</code> <code>int</code> <p>number of times to repeat in the x direction</p> required <code>y_times</code> <code>int</code> <p>number of times to repeat in the y direction</p> required <code>x_spacing</code> <code>float</code> <p>spacing in the x direction</p> required <code>y_spacing</code> <code>float</code> <p>spacing in the y direction</p> required <p>Returns:     Grid: a new grid object with the repeated pattern</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(Repeat)\ndef repeat(\n    grid: Grid, x_times: int, y_times: int, x_spacing: float, y_spacing: float\n) -&gt; Grid:\n    \"\"\"Repeat a grid in the x and y directions.\n\n    Args:\n        grid (Grid): a grid object\n        x_times (int): number of times to repeat in the x direction\n        y_times (int): number of times to repeat in the y direction\n        x_spacing (float): spacing in the x direction\n        y_spacing (float): spacing in the y direction\n    Returns:\n        Grid: a new grid object with the repeated pattern\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.scale","title":"scale","text":"<pre><code>scale(\n    grid: Grid[Nx, Ny], x_scale: float, y_scale: float\n) -&gt; Grid[Nx, Ny]\n</code></pre> <p>Scale a grid in the x and y directions.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid</code> <p>a grid object</p> required <code>x_scale</code> <code>float</code> <p>scaling factor in the x direction</p> required <code>y_scale</code> <code>float</code> <p>scaling factor in the y direction</p> required <p>Returns:     Grid: a new grid object that has been scaled</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(Scale)\ndef scale(grid: Grid[Nx, Ny], x_scale: float, y_scale: float) -&gt; Grid[Nx, Ny]:\n    \"\"\"Scale a grid in the x and y directions.\n\n    Args:\n        grid (Grid): a grid object\n        x_scale (float): scaling factor in the x direction\n        y_scale (float): scaling factor in the y direction\n    Returns:\n        Grid: a new grid object that has been scaled\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.shape","title":"shape","text":"<pre><code>shape(grid: Grid) -&gt; tuple[int, int]\n</code></pre> <p>Get the shape of a grid.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid</code> <p>a grid object</p> required <p>Returns:     tuple[int, int]: a tuple of (num_x, num_y)</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(Shape)\ndef shape(grid: Grid) -&gt; tuple[int, int]:\n    \"\"\"Get the shape of a grid.\n\n    Args:\n        grid (Grid): a grid object\n    Returns:\n        tuple[int, int]: a tuple of (num_x, num_y)\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.shift","title":"shift","text":"<pre><code>shift(\n    grid: Grid[Nx, Ny], x_shift: float, y_shift: float\n) -&gt; Grid[Nx, Ny]\n</code></pre> <p>Shift a grid in the x and y directions.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid</code> <p>a grid object</p> required <code>x_shift</code> <code>float</code> <p>shift in the x direction</p> required <code>y_shift</code> <code>float</code> <p>shift in the y direction</p> required <p>Returns:     Grid: a new grid object that has been shifted</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(Shift)\ndef shift(grid: Grid[Nx, Ny], x_shift: float, y_shift: float) -&gt; Grid[Nx, Ny]:\n    \"\"\"Shift a grid in the x and y directions.\n\n    Args:\n        grid (Grid): a grid object\n        x_shift (float): shift in the x direction\n        y_shift (float): shift in the y direction\n    Returns:\n        Grid: a new grid object that has been shifted\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.sub_grid","title":"sub_grid","text":"<pre><code>sub_grid(\n    grid: Grid,\n    x_indices: IList[int, Nx],\n    y_indices: IList[int, Ny],\n) -&gt; Grid[Nx, Ny]\n</code></pre><pre><code>sub_grid(\n    grid: Grid,\n    x_indices: IList[int, Nx],\n    y_indices: list[int],\n) -&gt; Grid[Nx, typing.Any]\n</code></pre><pre><code>sub_grid(\n    grid: Grid,\n    x_indices: list[int],\n    y_indices: IList[int, Ny],\n) -&gt; Grid[typing.Any, Ny]\n</code></pre><pre><code>sub_grid(\n    grid: Grid, x_indices: list[int], y_indices: list[int]\n) -&gt; Grid[typing.Any, typing.Any]\n</code></pre> <pre><code>sub_grid(grid, x_indices, y_indices)\n</code></pre> <p>Get a subgrid from the given grid.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid</code> <p>a grid object</p> required <code>x_indices</code> <p>a list/ilist of x indices</p> required <code>y_indices</code> <p>a list/ilist of y indices</p> required <p>Returns:     Grid: a subgrid object</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(GetSubGrid)\ndef sub_grid(grid, x_indices, y_indices):\n    \"\"\"Get a subgrid from the given grid.\n\n    Args:\n        grid (Grid): a grid object\n        x_indices: a list/ilist of x indices\n        y_indices: a list/ilist of y indices\n    Returns:\n        Grid: a subgrid object\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.x_bounds","title":"x_bounds","text":"<pre><code>x_bounds(grid: Grid[Any, Any]) -&gt; tuple[float, float]\n</code></pre> <p>Get the x bounds of a grid.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid</code> <p>a grid object</p> required <p>Returns:     tuple[float, float]: a tuple of (min_x, max_x)</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(GetXBounds)\ndef x_bounds(grid: Grid[typing.Any, typing.Any]) -&gt; tuple[float, float]:\n    \"\"\"Get the x bounds of a grid.\n\n    Args:\n        grid (Grid): a grid object\n    Returns:\n        tuple[float, float]: a tuple of (min_x, max_x)\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_interface.html#bloqade.geometry.dialects.grid._interface.y_bounds","title":"y_bounds","text":"<pre><code>y_bounds(grid: Grid[Any, Any]) -&gt; tuple[float, float]\n</code></pre> <p>Get the y bounds of a grid.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Grid</code> <p>a grid object</p> required <p>Returns:     tuple[float, float]: a tuple of (min_y, max_y)     tuple[None, None]: if the grid has no initial y position</p> Source code in <code>src/bloqade/geometry/dialects/grid/_interface.py</code> <pre><code>@_wraps(GetYBounds)\ndef y_bounds(grid: Grid[typing.Any, typing.Any]) -&gt; tuple[float, float]:\n    \"\"\"Get the y bounds of a grid.\n\n    Args:\n        grid (Grid): a grid object\n    Returns:\n        tuple[float, float]: a tuple of (min_y, max_y)\n        tuple[None, None]: if the grid has no initial y position\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/_typeinfer.html","title":"typeinfer","text":""},{"location":"reference/bloqade/geometry/dialects/grid/concrete.html","title":"Concrete","text":""},{"location":"reference/bloqade/geometry/dialects/grid/stmts.html","title":"Stmts","text":""},{"location":"reference/bloqade/geometry/dialects/grid/types.html","title":"types","text":""},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid","title":"Grid  <code>dataclass</code>","text":"<pre><code>Grid(\n    x_spacing: tuple[float, ...],\n    y_spacing: tuple[float, ...],\n    x_init: float | None,\n    y_init: float | None,\n)\n</code></pre> <p>               Bases: <code>Data['Grid']</code>, <code>Generic[NumX, NumY]</code></p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.height","title":"height  <code>cached</code> <code>property</code>","text":"<pre><code>height\n</code></pre> <p>Height of the grid, which is the sum of <code>y_spacing</code>.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.positions","title":"positions  <code>cached</code> <code>property</code>","text":"<pre><code>positions: IList[tuple[float, float], Any]\n</code></pre> <p>All positions in the grid as a list of tuples (x, y) in lexicographic order.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.shape","title":"shape  <code>cached</code> <code>property</code>","text":"<pre><code>shape: tuple[int, int]\n</code></pre> <p>Shape of the grid, which is (num_x, num_y).</p> Note <p>if x_init or y_init is None, num_x or num_y will be 0 respectively.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.width","title":"width  <code>cached</code> <code>property</code>","text":"<pre><code>width\n</code></pre> <p>Width of the grid, which is the sum of <code>x_spacing</code>.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.x_init","title":"x_init  <code>instance-attribute</code>","text":"<pre><code>x_init: float | None\n</code></pre> <p>The initial x position of the grid, or None if not set.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.x_positions","title":"x_positions  <code>cached</code> <code>property</code>","text":"<pre><code>x_positions: tuple[float, ...]\n</code></pre> <p>X positions of the grid.</p> Note <p>If <code>x_init</code> is None, returns an empty tuple.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.x_spacing","title":"x_spacing  <code>instance-attribute</code>","text":"<pre><code>x_spacing: tuple[float, ...]\n</code></pre> <p>A tuple of x spacings between grid points.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.y_init","title":"y_init  <code>instance-attribute</code>","text":"<pre><code>y_init: float | None\n</code></pre> <p>The initial y position of the grid, or None if not set.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.y_positions","title":"y_positions  <code>cached</code> <code>property</code>","text":"<pre><code>y_positions: tuple[float, ...]\n</code></pre> <p>Y positions of the grid.</p> Note <p>If <code>y_init</code> is None, returns an empty tuple.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.y_spacing","title":"y_spacing  <code>instance-attribute</code>","text":"<pre><code>y_spacing: tuple[float, ...]\n</code></pre> <p>A tuple of y spacings between grid points.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.from_positions","title":"from_positions  <code>classmethod</code>","text":"<pre><code>from_positions(\n    x_positions: Sequence[float],\n    y_positions: Sequence[float],\n)\n</code></pre> <p>Create a grid from sequence of x and y positions.</p> <p>Args:</p> <pre><code>x_positions (Sequence[float]): The x positions.\ny_positions (Sequence[float]): The y positions.\n</code></pre> <p>Returns:</p> Name Type Description <code>Grid</code> <p>A grid object with the specified x and y positions.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>@classmethod\ndef from_positions(\n    cls,\n    x_positions: Sequence[float],\n    y_positions: Sequence[float],\n):\n    \"\"\"Create a grid from sequence of x and y positions.\n\n    Args:\n\n        x_positions (Sequence[float]): The x positions.\n        y_positions (Sequence[float]): The y positions.\n\n    Returns:\n        Grid: A grid object with the specified x and y positions.\n    \"\"\"\n    x_init = x_positions[0] if len(x_positions) &gt; 0 else None\n    y_init = y_positions[0] if len(y_positions) &gt; 0 else None\n\n    if len(x_positions) &gt; 1:\n        x_spacing = tuple(\n            x_positions[i + 1] - x_positions[i] for i in range(len(x_positions) - 1)\n        )\n    else:\n        x_spacing = ()\n\n    if len(y_positions) &gt; 1:\n        y_spacing = tuple(\n            y_positions[i + 1] - y_positions[i] for i in range(len(y_positions) - 1)\n        )\n    else:\n        y_spacing = ()\n\n    return cls(x_spacing, y_spacing, x_init, y_init)\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.get","title":"get","text":"<pre><code>get(idx: tuple[int, int]) -&gt; tuple[float, float]\n</code></pre> <p>Get the (x, y) position at the specified grid index.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>tuple[int, int]</code> <p>The (x, y) index in the grid.</p> required <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>tuple[float, float]: The (x, y) position in the grid.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def get(self, idx: tuple[int, int]) -&gt; tuple[float, float]:\n    \"\"\"Get the (x, y) position at the specified grid index.\n\n    Args:\n        idx (tuple[int, int]): The (x, y) index in the grid.\n\n    Returns:\n        tuple[float, float]: The (x, y) position in the grid.\n    \"\"\"\n    return (self.x_positions[idx[0]], self.y_positions[idx[1]])\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.get_view","title":"get_view","text":"<pre><code>get_view(\n    x_indices: IList[int, Nx], y_indices: IList[int, Ny]\n) -&gt; Grid[Nx, Ny]\n</code></pre> <p>Get a sub-grid view based on the specified x and y indices.</p> <p>Parameters:</p> Name Type Description Default <code>x_indices</code> <code>IList[int, Nx]</code> <p>The x indices to include in the sub-grid.</p> required <code>y_indices</code> <code>IList[int, Ny]</code> <p>The y indices to include in the sub-grid.</p> required <p>Returns:</p> Type Description <code>Grid[Nx, Ny]</code> <p>Grid[Nx, Ny]: The sub-grid view.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def get_view(\n    self, x_indices: ilist.IList[int, Nx], y_indices: ilist.IList[int, Ny]\n) -&gt; \"Grid[Nx, Ny]\":\n    \"\"\"Get a sub-grid view based on the specified x and y indices.\n\n    Args:\n        x_indices (ilist.IList[int, Nx]): The x indices to include in the sub-grid.\n        y_indices (ilist.IList[int, Ny]): The y indices to include in the sub-grid.\n\n    Returns:\n        Grid[Nx, Ny]: The sub-grid view.\n    \"\"\"\n    return SubGrid(parent=self, x_indices=x_indices, y_indices=y_indices)\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.is_equal","title":"is_equal","text":"<pre><code>is_equal(other: Any) -&gt; bool\n</code></pre> <p>Check if two grid geometry are equal.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def is_equal(self, other: Any) -&gt; bool:\n    \"\"\"Check if two grid geometry are equal.\"\"\"\n    if not isinstance(other, Grid):\n        return False\n    return (\n        self.x_spacing == other.x_spacing\n        and self.y_spacing == other.y_spacing\n        and self.x_init == other.x_init\n        and self.y_init == other.y_init\n    )\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.repeat","title":"repeat","text":"<pre><code>repeat(\n    x_times: int, y_times: int, x_gap: float, y_gap: float\n) -&gt; Grid[NumX, NumY]\n</code></pre> <p>Repeat the grid in both x and y directions with specified gaps.</p> <p>Parameters:</p> Name Type Description Default <code>x_times</code> <code>int</code> <p>The number of times to repeat the grid in the x direction.</p> required <code>y_times</code> <code>int</code> <p>The number of times to repeat the grid in the y direction.</p> required <code>x_gap</code> <code>float</code> <p>The gap between repeated grids in the x direction.</p> required <code>y_gap</code> <code>float</code> <p>The gap between repeated grids in the y direction.</p> required <p>Returns:</p> Type Description <code>Grid[NumX, NumY]</code> <p>Grid[Nx, Ny]: A new grid with the specified repetitions and gaps.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def repeat(\n    self, x_times: int, y_times: int, x_gap: float, y_gap: float\n) -&gt; \"Grid[NumX, NumY]\":\n    \"\"\"Repeat the grid in both x and y directions with specified gaps.\n\n    Args:\n        x_times (int): The number of times to repeat the grid in the x direction.\n        y_times (int): The number of times to repeat the grid in the y direction.\n        x_gap (float): The gap between repeated grids in the x direction.\n        y_gap (float): The gap between repeated grids in the y direction.\n\n    Returns:\n        Grid[Nx, Ny]: A new grid with the specified repetitions and gaps.\n\n    \"\"\"\n\n    if x_times &lt; 1 or y_times &lt; 1:\n        raise ValueError(\"x_times and y_times must be non-negative\")\n\n    return Grid(\n        x_spacing=sum((self.x_spacing + (x_gap,) for _ in range(x_times - 1)), ())\n        + self.x_spacing,\n        y_spacing=sum((self.y_spacing + (y_gap,) for _ in range(y_times - 1)), ())\n        + self.y_spacing,\n        x_init=self.x_init,\n        y_init=self.y_init,\n    )\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.scale","title":"scale","text":"<pre><code>scale(x_scale: float, y_scale: float) -&gt; Grid[NumX, NumY]\n</code></pre> <p>Scale the grid spacings the specified x and y factors with fix x and y initial positions.</p> <p>Parameters:</p> Name Type Description Default <code>x_scale</code> <code>float</code> <p>The scaling factor for the x spacings.</p> required <code>y_scale</code> <code>float</code> <p>The scaling factor for the y spacings.</p> required <p>Returns:</p> Type Description <code>Grid[NumX, NumY]</code> <p>Grid[Nx, Ny]: A new grid with scaled x and y spacings</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def scale(self, x_scale: float, y_scale: float) -&gt; \"Grid[NumX, NumY]\":\n    \"\"\"Scale the grid spacings the specified x and y factors with fix x and y initial positions.\n\n    Args:\n        x_scale (float): The scaling factor for the x spacings.\n        y_scale (float): The scaling factor for the y spacings.\n\n    Returns:\n        Grid[Nx, Ny]: A new grid with scaled x and y spacings\n\n    \"\"\"\n    return Grid(\n        x_spacing=tuple(spacing * x_scale for spacing in self.x_spacing),\n        y_spacing=tuple(spacing * y_scale for spacing in self.y_spacing),\n        x_init=self.x_init,\n        y_init=self.y_init,\n    )\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.set_init","title":"set_init","text":"<pre><code>set_init(\n    x_init: float | None, y_init: float | None\n) -&gt; Grid[NumX, NumY]\n</code></pre> <p>Set the initial positions of the grid.</p> <p>Parameters:</p> Name Type Description Default <code>x_init</code> <code>float | None</code> <p>The new initial x position. If None, the grid will not have an initial x position.</p> required <code>y_init</code> <code>float | None</code> <p>The new initial y position. If None, the grid will not have an initial y position.</p> required <p>Returns:</p> Type Description <code>Grid[NumX, NumY]</code> <p>Grid[Nx, Ny]: A new grid with the specified initial positions.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def set_init(\n    self, x_init: float | None, y_init: float | None\n) -&gt; \"Grid[NumX, NumY]\":\n    \"\"\"Set the initial positions of the grid.\n\n    Args:\n        x_init (float | None): The new initial x position. If None, the grid\n            will not have an initial x position.\n        y_init (float | None): The new initial y position. If None, the grid\n            will not have an initial y position.\n\n    Returns:\n        Grid[Nx, Ny]: A new grid with the specified initial positions.\n\n    \"\"\"\n    return Grid(self.x_spacing, self.y_spacing, x_init, y_init)\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.shift","title":"shift","text":"<pre><code>shift(x_shift: float, y_shift: float) -&gt; Grid[NumX, NumY]\n</code></pre> <p>Shift the grid by the specified x and y amounts.</p> <p>Parameters:</p> Name Type Description Default <code>x_shift</code> <code>float</code> <p>The amount to shift the grid in the x direction.</p> required <code>y_shift</code> <code>float</code> <p>The amount to shift the grid in the y direction.</p> required <p>Returns:</p> Type Description <code>Grid[NumX, NumY]</code> <p>Grid[Nx, Ny]: A new grid with the specified shifts applied to the initial positions.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def shift(self, x_shift: float, y_shift: float) -&gt; \"Grid[NumX, NumY]\":\n    \"\"\"Shift the grid by the specified x and y amounts.\n\n    Args:\n        x_shift (float): The amount to shift the grid in the x direction.\n        y_shift (float): The amount to shift the grid in the y direction.\n\n    Returns:\n        Grid[Nx, Ny]: A new grid with the specified shifts applied to the initial positions.\n\n    \"\"\"\n    return Grid(\n        x_spacing=self.x_spacing,\n        y_spacing=self.y_spacing,\n        x_init=self.x_init + x_shift if self.x_init is not None else None,\n        y_init=self.y_init + y_shift if self.y_init is not None else None,\n    )\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.x_bounds","title":"x_bounds","text":"<pre><code>x_bounds()\n</code></pre> <p>X bounds of the grid, which is <code>(x_init, x_init + width)</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If x_init is None, cannot compute bounds.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def x_bounds(self):\n    \"\"\"X bounds of the grid, which is `(x_init, x_init + width)`.\n\n    Raises:\n        ValueError: If x_init is None, cannot compute bounds.\n\n    \"\"\"\n    if self.x_init is None:\n        raise ValueError(\"x_init is None, cannot compute bounds\")\n\n    return (self.x_init, self.x_init + self.width)\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.Grid.y_bounds","title":"y_bounds","text":"<pre><code>y_bounds()\n</code></pre> <p>Y bounds of the grid, which is <code>(y_init, y_init + height)</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If y_init is None, cannot compute bounds.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def y_bounds(self):\n    \"\"\"Y bounds of the grid, which is `(y_init, y_init + height)`.\n\n    Raises:\n        ValueError: If y_init is None, cannot compute bounds.\n\n    \"\"\"\n    if self.y_init is None:\n        raise ValueError(\"y_init is None, cannot compute bounds\")\n\n    return (self.y_init, self.y_init + self.height)\n</code></pre>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.SubGrid","title":"SubGrid  <code>dataclass</code>","text":"<pre><code>SubGrid(\n    x_spacing: tuple[float, ...],\n    y_spacing: tuple[float, ...],\n    x_init: float | None,\n    y_init: float | None,\n    parent: Grid[Any, Any],\n    x_indices: IList[int, NumX],\n    y_indices: IList[int, NumY],\n)\n</code></pre> <p>               Bases: <code>Grid[NumX, NumY]</code></p> <p>A sub-grid view of a parent grid with specified x and y indices.</p> <p>For API documentation see the <code>Grid</code> class.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.SubGrid.x_init","title":"x_init  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>x_init: float | None = field(init=False)\n</code></pre> <p>The initial x position of the grid, or None if not set.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.SubGrid.x_spacing","title":"x_spacing  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>x_spacing: tuple[float, ...] = field(init=False)\n</code></pre> <p>A tuple of x spacings between grid points.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.SubGrid.y_init","title":"y_init  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>y_init: float | None = field(init=False)\n</code></pre> <p>The initial y position of the grid, or None if not set.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.SubGrid.y_spacing","title":"y_spacing  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>y_spacing: tuple[float, ...] = field(init=False)\n</code></pre> <p>A tuple of y spacings between grid points.</p>"},{"location":"reference/bloqade/geometry/dialects/grid/types.html#bloqade.geometry.dialects.grid.types.SubGrid.get_view","title":"get_view","text":"<pre><code>get_view(\n    x_indices: IList[int, Any], y_indices: IList[int, Any]\n)\n</code></pre> <p>Get a sub-grid view based on the specified x and y indices.</p> <p>Parameters:</p> Name Type Description Default <code>x_indices</code> <code>IList[int, Nx]</code> <p>The x indices to include in the sub-grid.</p> required <code>y_indices</code> <code>IList[int, Ny]</code> <p>The y indices to include in the sub-grid.</p> required <p>Returns:</p> Type Description <code>Grid[Nx, Ny]</code> <p>Grid[Nx, Ny]: The sub-grid view.</p> Source code in <code>src/bloqade/geometry/dialects/grid/types.py</code> <pre><code>def get_view(\n    self, x_indices: ilist.IList[int, Any], y_indices: ilist.IList[int, Any]\n):\n    return self.parent.get_view(\n        x_indices=ilist.IList([self.x_indices[x_index] for x_index in x_indices]),\n        y_indices=ilist.IList([self.y_indices[y_index] for y_index in y_indices]),\n    )\n</code></pre>"},{"location":"reference/bloqade/geometry/rewrite/index.html","title":"Index","text":""},{"location":"reference/bloqade/geometry/rewrite/desugar.html","title":"Desugar","text":""},{"location":"blog/index.html","title":"Blog","text":""}]}